var onRun = function(context) {
  String.prototype.paddingLeft = function (paddingValue) {
  return String(paddingValue + this).slice(-paddingValue.length);
};



function styleHash(style) {
  return style.font.name + "_" + style.font.size + "_" + style.color.hex 
}

function UIColor(color) {
  //return "UIColor(r: " + color.red() + " g: "+ color.green() + " b: " + color.blue() +" alpha: " + color.alpha() + ")"
  return "UIColor(rgb: \"" + color.hexValue() + "\", alpha: " + color.alpha() + ")"
}

function copy_text(txt){
  var pasteBoard = [NSPasteboard generalPasteboard]
  [pasteBoard declareTypes:[NSArray arrayWithObject:NSPasteboardTypeString] owner:nil]
  [pasteBoard setString:txt forType:NSPasteboardTypeString]
}

//function rtoh(r) {
  //return {"x": r.origin.x+0.0, "y": r.origin.y+0.0, "width": r.size.width+0.0, "height": r.size.height+0.0}
//}

function hash(color) {

  return [[MSImmutableColor alloc]initWithRed: color.red() green: color.green() blue: color.blue() alpha: color.alpha()].hexValue() + "_" + parseInt(color.alpha()*100)
}

function rtoh2(r) {
  return {"x": Math.floor(r.x()+0.0), "y": Math.floor(r.y()+0.0), "width": Math.floor(r.width()+0.0), "height": Math.floor(r.height()+0.0)}
}

function serialize(layer, layers, name, frame) {
    var x = {}
    
    if (name !== null) {
        x.name = name + ""
    } else {
        x.name = layer.name() + ""
    }

    if (frame !== null) {
        x.frame = frame
    } else {
        x.frame = rtoh2(layer.frame())
    }

    switch(layer.class()) {

        case MSTextLayer:
            x.type = "text"
            x.color = {}
            x.color.type = "text"
            x.color.hex = hash(layer.textColor())
            x.font = {}
            x.font.name = layer.fontPostscriptName() + ""
            x.font.size = layer.fontSize() + ""
            x.textAlignment = layer.textAlignment() + ""
            x.text = layer.stringValue() + ""
            layers.push(x)
            break
        case  MSShapeGroup:
            var children = layer.layers()
            for(var i=0; i < children.length; i++){
                serialize(children[i], layers, layer.name(), rtoh2(layer.frame()))
            }
            break
        case MSLayerGroup:
            var children = layer.layers()
            var sublayers = []
            for(var i=0; i < children.length; i++){
                serialize(children[i], sublayers, null, null)
            }
            x.type = "basic"
            x.sublayers = sublayers
            layers.push(x)
            break
        case MSArtboardGroup:
            var children = layer.layers()
            
            for(var i=0; i < children.length; i++){
                serialize(children[i], layers, null, null)
            }
            break
        case MSShapePathLayer:
            if (layer.isLine()) {
                
                x.type = "line"
                var sl, fill, border
                layer.styledLayer && (sl = layer.styledLayer())
                if (border = sl.style().borders().firstObject()){
                    x.border = {}
                    x.border.hex = hash(border.color()) + ""
                    x.border.type = "border"
                    x.border.thickness = border.thickness() + ""
                }
                layers.push(x)
            } else {
              x.type = "basic"
              layers.push(x)
            }
            break
        case MSRectangleShape:
        case MSOvalShape:
            x.type = "basic"
            var sl, fill, border
            layer.styledLayer && (sl = layer.styledLayer())
            if (fill = sl.style().fills().firstObject()){
                x.fill = {}
                x.fill.hex = hash(fill.color()) + ""
                x.fill.type = "fill"
            }
            
            if (border = sl.style().borders().firstObject()){
                x.border = {}
                x.border.hex = hash(border.color()) + ""
                x.border.type = "border"
                x.border.thickness = border.thickness() + ""
            }
            layers.push(x)
            break
        case MSSymbolInstance:
            x.type = "basic"
            layers.push(x)
        case MSSliceLayer:
            x.type = "basic"
            layers.push(x)
        default:
            break
    }
}

function hud(funcs) {

  var identifier = "com.z.sketchsuit";
  var threadDictionary = NSThread.mainThread().threadDictionary();
  if (threadDictionary[identifier]) {
    return;
  }
  var window = NSPanel.alloc().init();
  window.setFrame_display(NSMakeRect(0, 0, 380, 420), true);
  window.setStyleMask(NSTitledWindowMask | NSClosableWindowMask | NSFullSizeContentViewWindowMask);
  window.setBackgroundColor(NSColor.whiteColor());
  window.standardWindowButton(NSWindowMiniaturizeButton).setHidden(true);
  window.standardWindowButton(NSWindowZoomButton).setHidden(true);
  window.setTitle("HUD");
  window.setTitlebarAppearsTransparent(true);
  window.becomeKeyWindow();
  window.setLevel(NSFloatingWindowLevel);

  threadDictionary[identifier] = window;
  COScript.currentCOScript().setShouldKeepAround_(true);

  var closeButton = window.standardWindowButton(NSWindowCloseButton);
  closeButton.setCOSJSTargetFunction(function(sender) {
    COScript.currentCOScript().setShouldKeepAround(false);
    threadDictionary.removeObjectForKey(identifier);
    window.close();
  });
  closeButton.setAction("callAction:");

  var r = CGRectZero
  r.origin.y = window.contentView().frame().size.height - 30

  for (var i = 0; i<funcs.length; i++) {
    var button = [[NSButton alloc] init]
    button.title = " " + funcs[i].title + " "
    button.sizeToFit()
    r.size = button.frame().size
    r.origin.y -= r.size.height + 8
    button.frame = r
    [button setCOSJSTargetFunction:funcs[i].callback];
    window.contentView().addSubview(button);
  }

  window.center();
  window.makeKeyAndOrderFront(nil);
  return window
};

function runSys(cmd, args) {
  var task = NSTask.alloc().init()
  
  task.environment = {"LANG": "en_US.UTF-8"} // Ruby's JSON respects this ...

  task.launchPath = cmd
  task.arguments = args

  var pipe = NSPipe.alloc().init()
  var pipeErr = NSPipe.alloc().init()
  task.standardOutput = pipe
  task.standardError = pipeErr
  task.launch()
  task.waitUntilExit()

  var data = pipe.fileHandleForReading().readDataToEndOfFile()
  var s = [[NSString alloc]initWithData: data encoding: NSUTF8StringEncoding]
  log(s)

  data = pipeErr.fileHandleForReading().readDataToEndOfFile()
  s = [[NSString alloc]initWithData: data encoding: NSUTF8StringEncoding]
  log(s)
}

function runRuby(args) {
  runSys("/usr/bin/ruby", args)
}

function styleWork(lang, os) {
  var all_layers = context.document.currentPage().layers()
  var layers = []

  for(var i=0; i < all_layers.length; i++){
    var layer = all_layers[i]
    serialize(layer, layers)
  }

  var s = [NSString stringWithFormat:"%@", JSON.stringify(layers)];

  [s writeToFile: NSTemporaryDirectory() + "output/kkk.json" atomically:true encoding:NSUTF8StringEncoding error:nil]

  runRuby([(context.scriptPath.stringByDeletingLastPathComponent() + "/" + "style.rb"), lang, os, (NSTemporaryDirectory()+"output")])
  
  runSys("/usr/bin/open", [NSTemporaryDirectory()+"output/"])
  
}


function selected() { // as context is a one-off
    var doc = NSDocumentController.sharedDocumentController().currentDocument()
    var selection = doc.selectedLayers().layers()
    return selection.firstObject()
}
function dup(total, distance, orientation) {
  var layer = selected()
  if (layer) {
    var r = layer.frame()
    for(i=0;i<total-1;i++){
        var l = layer.duplicate()
        var rr = r.copy()
        if (orientation == 2) {
            rr.x = r.x() + (i+1)*distance
        } else if (orientation == 1){
            rr.y = r.y() + (i+1)*distance
        }
        l.frame = rr
    }
  }
}

function add_text_box() {
  var layer = selected()
  if (layer) {
    var container = layer
		while (container.class() != 'MSPage' && container.class() != 'MSArtboardGroup' && container.class() != 'MSLayerGroup') {
			container = container.parentGroup()
		}
    log(container)
    var r = layer.frame()
    var rect = MSRectangleShape.alloc().init();
    rect.frame = r.copy() 
    var shapeGroup = MSShapeGroup.shapeWithPath(rect)
    shapeGroup.style().addStylePartOfType(1);
    container.addLayers([shapeGroup])
  }
}

function export_view(lang, os) {
  
  var layers = []
  serialize(context.selection.firstObject(), layers, null, null)

  var s = [NSString stringWithFormat:"%@", JSON.stringify(layers)];

  [s writeToFile: NSTemporaryDirectory() + "output/kkk.json" atomically:true encoding:NSUTF8StringEncoding error:nil]

  var rbfile = "/export_view_" + lang + "_" + os + ".rb";
  var output = runRuby([(context.scriptPath.stringByDeletingLastPathComponent() + rbfile), (NSTemporaryDirectory()+"output")])
  
  runSys("/usr/bin/open", [NSTemporaryDirectory()+"output/"])
}


function generate_file_by_names_in_ObjC() {
  var layers = []
  serialize(context.selection.firstObject(), layers, null, null)

  var s = [NSString stringWithFormat:"%@", JSON.stringify(layers)];

  [s writeToFile: NSTemporaryDirectory() + "output/kkk.json" atomically:true encoding:NSUTF8StringEncoding error:nil]

  
  var output = runRuby([(context.scriptPath.stringByDeletingLastPathComponent() + "/generateObjcFileByNames.rb"), (NSTemporaryDirectory()+"output")])
  
  runSys("/usr/bin/open", [NSTemporaryDirectory()+"output/"])

}

function DuplicationFeature(window) {
  var r = CGRectZero
  r.origin.y = 40
  var button = [[NSButton alloc] init]
    button.title = " " + "make_copies" + " "
    button.sizeToFit()
    r.size = button.frame().size
    r.origin.y -= r.size.height + 8
    button.frame = r
    window.contentView().addSubview(button)

  r.origin.x += r.size.width + 10
  var label = [NSTextField labelWithString:"distance"]
  r.size.width = label.frame().size.width
  label.frame = r
  window.contentView().addSubview(label)

  r.origin.x += r.size.width
  r.size.width = 30
  var offsetEdit = [[NSTextField alloc]init]
  offsetEdit.frame = r
  window.contentView().addSubview(offsetEdit)
 
 r.origin.x += r.size.width
  label = [NSTextField labelWithString:"total"]
  r.size.width = label.frame().size.width
  label.frame = r
  window.contentView().addSubview(label)

  r.origin.x += r.size.width
  r.size.width = 30
  var totalEdit = [[NSTextField alloc]init]
  totalEdit.frame = r
  window.contentView().addSubview(totalEdit)

  r.origin.x += r.size.width + 10
  var radiobutton = [[NSButton alloc] init]
  radiobutton.setButtonType(NSRadioButton)
  radiobutton.setTitle( '→' )
  radiobutton.sizeToFit()
  radiobutton.setState( true )
  radiobutton.setAction("callAction:")
  r.size.width = radiobutton.frame().size.width
  radiobutton.frame = r
  window.contentView().addSubview(radiobutton)
  var option1 = radiobutton
  
  r.origin.x += r.size.width + 10
  radiobutton = [[NSButton alloc] init]
  radiobutton.setButtonType(NSRadioButton)
  radiobutton.setTitle( '↓' )
  radiobutton.sizeToFit()
  radiobutton.setAction("callAction:")
  r.size.width = radiobutton.frame().size.width
  radiobutton.frame = r
  window.contentView().addSubview(radiobutton)
  var option2 = radiobutton

  [button setCOSJSTargetFunction: function(){
    var o = (option1.state() + 0) * 2 + (option2.state() + 0)
    var total = parseInt(totalEdit.stringValue())
    var distance = parseFloat(offsetEdit.stringValue())
    dup(total, distance, o)
  }];

}

function PaletteFeature(window) {
  var r = CGRectZero
  r.origin.y = 120
  var button = [[NSButton alloc] init]
    button.title = " " + "make_palette" + " "
    button.sizeToFit()
    r.size = button.frame().size
    r.origin.y -= r.size.height + 8
    button.frame = r
    window.contentView().addSubview(button)


  var g1 = [[NSView alloc] init]


  r.origin.x += r.size.width + 10

  var r1 = CGRectZero
  var radiobutton = [[NSButton alloc] init]
  radiobutton.setButtonType(NSRadioButton)
  radiobutton.setTitle( 'iOS' )
  radiobutton.sizeToFit()
  radiobutton.setState( true )
  radiobutton.setAction("callAction:")
  r1.size = radiobutton.frame().size
  radiobutton.frame = r1
  g1.addSubview(radiobutton)
  var option1 = radiobutton
  
  r1.origin.x += r1.size.width + 10
  radiobutton = [[NSButton alloc] init]
  radiobutton.setButtonType(NSRadioButton)
  radiobutton.setTitle( 'macOS' )
  radiobutton.sizeToFit()
  radiobutton.setAction("callAction:")
  r1.size = radiobutton.frame().size
  radiobutton.frame = r1
  g1.addSubview(radiobutton)
  var option2 = radiobutton

  r.size.width = r1.origin.x + r1.size.width
  g1.frame = r

  window.contentView().addSubview(g1)


  var g2 = [[NSView alloc] init]


  r.origin.x += r.size.width + 10

  r1 = CGRectZero
  radiobutton = [[NSButton alloc] init]
  radiobutton.setButtonType(NSRadioButton)
  radiobutton.setTitle( 'Swift' )
  radiobutton.sizeToFit()
  radiobutton.setState( true )
  radiobutton.setAction("callAction:")
  r1.size = radiobutton.frame().size
  radiobutton.frame = r1
  g2.addSubview(radiobutton)
  var option3 = radiobutton
  
  r1.origin.x += r1.size.width + 10
  radiobutton = [[NSButton alloc] init]
  radiobutton.setButtonType(NSRadioButton)
  radiobutton.setTitle( 'ObjC' )
  radiobutton.sizeToFit()
  radiobutton.setAction("callAction:")
  r1.size = radiobutton.frame().size
  radiobutton.frame = r1
  g2.addSubview(radiobutton)
  var option4 = radiobutton

  r.size.width = r1.origin.x + r1.size.width
  g2.frame = r

  window.contentView().addSubview(g2)

  [button setCOSJSTargetFunction: function(){
    var lang = (option3.state() ? "Swift" : "ObjC")
    var os = (option1.state() ? "iOS" : "macOS")
    styleWork(lang, os)
  }];

  [option1 setCOSJSTargetFunction: function(){
    option4.enabled = true
  }];

  [option2 setCOSJSTargetFunction: function(){
    option3.state = 1 
    option4.enabled = false
  }];

}
function ExportViewFeature(window) {
  var r = CGRectZero
  r.origin.y = 90
  var button = [[NSButton alloc] init]
    button.title = " " + "export_view" + " "
    button.sizeToFit()
    r.size = button.frame().size
    r.origin.y -= r.size.height + 8
    button.frame = r
    window.contentView().addSubview(button)


  var g1 = [[NSView alloc] init]


  r.origin.x += r.size.width + 10

  var r1 = CGRectZero
  var radiobutton = [[NSButton alloc] init]
  radiobutton.setButtonType(NSRadioButton)
  radiobutton.setTitle( 'iOS' )
  radiobutton.sizeToFit()
  radiobutton.setState( true )
  radiobutton.setAction("callAction:")
  r1.size = radiobutton.frame().size
  radiobutton.frame = r1
  g1.addSubview(radiobutton)
  var option1 = radiobutton
  
  r1.origin.x += r1.size.width + 10
  radiobutton = [[NSButton alloc] init]
  radiobutton.setButtonType(NSRadioButton)
  radiobutton.setTitle( 'macOS' )
  radiobutton.sizeToFit()
  radiobutton.setAction("callAction:")
  r1.size = radiobutton.frame().size
  radiobutton.frame = r1
  g1.addSubview(radiobutton)
  var option2 = radiobutton

  r.size.width = r1.origin.x + r1.size.width
  g1.frame = r

  window.contentView().addSubview(g1)


  var g2 = [[NSView alloc] init]


  r.origin.x += r.size.width + 10

  r1 = CGRectZero
  radiobutton = [[NSButton alloc] init]
  radiobutton.setButtonType(NSRadioButton)
  radiobutton.setTitle( 'Swift' )
  radiobutton.sizeToFit()
  radiobutton.setState( true )
  radiobutton.setAction("callAction:")
  r1.size = radiobutton.frame().size
  radiobutton.frame = r1
  g2.addSubview(radiobutton)
  var option3 = radiobutton
  
  r1.origin.x += r1.size.width + 10
  radiobutton = [[NSButton alloc] init]
  radiobutton.setButtonType(NSRadioButton)
  radiobutton.setTitle( 'ObjC' )
  radiobutton.sizeToFit()
  radiobutton.setAction("callAction:")
  r1.size = radiobutton.frame().size
  radiobutton.frame = r1
  g2.addSubview(radiobutton)
  var option4 = radiobutton

  r.size.width = r1.origin.x + r1.size.width
  g2.frame = r

  window.contentView().addSubview(g2)

  [button setCOSJSTargetFunction: function(){
    var lang = (option3.state() ? "Swift" : "ObjC")
    var os = (option1.state() ? "iOS" : "macOS")
    export_view(lang, os)
  }];

  [option1 setCOSJSTargetFunction: function(){
    option4.enabled = true
  }];

  [option2 setCOSJSTargetFunction: function(){
    option3.state = 1 
    option4.enabled = false
  }];

}

function Klass(n,o){
  var m;
  Mocha[n]={};
  if(o.init){
    Mocha[n]=o.init;
    delete o.init;
    Mocha[n].reset=function(){this.$={};};
  }
  for(m in o){
    if(m[0]=='_')
      Mocha[n][m.slice(1)]=o[m];
    else
      Mocha[n].prototype[m]=o[m];
  }
  delete o;
  Mocha[n].$={};
}
Klass('Fn',{
  init:
    function(title, callback){
      this.title = title
      this.callback = callback
    },
})

+function(){
  runSys("/bin/mkdir", ["-p", NSTemporaryDirectory()+"output/"])
  var window = hud([
    new Mocha.Fn("add_box", function(){add_box()}),
    new Mocha.Fn("generate_file_by_names_in_ObjC", function(){generate_file_by_names_in_ObjC()}),
  ])
  
  DuplicationFeature(window)
  ExportViewFeature(window)
  PaletteFeature(window) 
}()


};
